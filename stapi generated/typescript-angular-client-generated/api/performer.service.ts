/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PerformerBaseResponse } from '../model/performerBaseResponse';
import { PerformerFullResponse } from '../model/performerFullResponse';
import { PerformerV2BaseResponse } from '../model/performerV2BaseResponse';
import { PerformerV2FullResponse } from '../model/performerV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PerformerService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single performer
     * @param uid Performer unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetPerformer(uid: string, observe?: 'body', reportProgress?: boolean): Observable<PerformerFullResponse>;
    public v1GetPerformer(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerFullResponse>>;
    public v1GetPerformer(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerFullResponse>>;
    public v1GetPerformer(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetPerformer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PerformerFullResponse>('get',`${this.basePath}/v1/rest/performer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over performers
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<PerformerBaseResponse>;
    public v1PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerBaseResponse>>;
    public v1PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerBaseResponse>>;
    public v1PagePerformers(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PerformerBaseResponse>('get',`${this.basePath}/v1/rest/performer/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching performers
     * @param name 
     * @param birthName 
     * @param gender 
     * @param dateOfBirthFrom 
     * @param dateOfBirthTo 
     * @param placeOfBirth 
     * @param dateOfDeathFrom 
     * @param dateOfDeathTo 
     * @param placeOfDeath 
     * @param animalPerformer 
     * @param disPerformer 
     * @param ds9Performer 
     * @param entPerformer 
     * @param filmPerformer 
     * @param standInPerformer 
     * @param stuntPerformer 
     * @param tasPerformer 
     * @param tngPerformer 
     * @param tosPerformer 
     * @param videoGamePerformer 
     * @param voicePerformer 
     * @param voyPerformer 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, standInPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<PerformerBaseResponse>;
    public v1SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, standInPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerBaseResponse>>;
    public v1SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, standInPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerBaseResponse>>;
    public v1SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, standInPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (birthName !== undefined) {
            formParams = formParams.append('birthName', <any>birthName) as any || formParams;
        }
        if (gender !== undefined) {
            formParams = formParams.append('gender', <any>gender) as any || formParams;
        }
        if (dateOfBirthFrom !== undefined) {
            formParams = formParams.append('dateOfBirthFrom', <any>dateOfBirthFrom) as any || formParams;
        }
        if (dateOfBirthTo !== undefined) {
            formParams = formParams.append('dateOfBirthTo', <any>dateOfBirthTo) as any || formParams;
        }
        if (placeOfBirth !== undefined) {
            formParams = formParams.append('placeOfBirth', <any>placeOfBirth) as any || formParams;
        }
        if (dateOfDeathFrom !== undefined) {
            formParams = formParams.append('dateOfDeathFrom', <any>dateOfDeathFrom) as any || formParams;
        }
        if (dateOfDeathTo !== undefined) {
            formParams = formParams.append('dateOfDeathTo', <any>dateOfDeathTo) as any || formParams;
        }
        if (placeOfDeath !== undefined) {
            formParams = formParams.append('placeOfDeath', <any>placeOfDeath) as any || formParams;
        }
        if (animalPerformer !== undefined) {
            formParams = formParams.append('animalPerformer', <any>animalPerformer) as any || formParams;
        }
        if (disPerformer !== undefined) {
            formParams = formParams.append('disPerformer', <any>disPerformer) as any || formParams;
        }
        if (ds9Performer !== undefined) {
            formParams = formParams.append('ds9Performer', <any>ds9Performer) as any || formParams;
        }
        if (entPerformer !== undefined) {
            formParams = formParams.append('entPerformer', <any>entPerformer) as any || formParams;
        }
        if (filmPerformer !== undefined) {
            formParams = formParams.append('filmPerformer', <any>filmPerformer) as any || formParams;
        }
        if (standInPerformer !== undefined) {
            formParams = formParams.append('standInPerformer', <any>standInPerformer) as any || formParams;
        }
        if (stuntPerformer !== undefined) {
            formParams = formParams.append('stuntPerformer', <any>stuntPerformer) as any || formParams;
        }
        if (tasPerformer !== undefined) {
            formParams = formParams.append('tasPerformer', <any>tasPerformer) as any || formParams;
        }
        if (tngPerformer !== undefined) {
            formParams = formParams.append('tngPerformer', <any>tngPerformer) as any || formParams;
        }
        if (tosPerformer !== undefined) {
            formParams = formParams.append('tosPerformer', <any>tosPerformer) as any || formParams;
        }
        if (videoGamePerformer !== undefined) {
            formParams = formParams.append('videoGamePerformer', <any>videoGamePerformer) as any || formParams;
        }
        if (voicePerformer !== undefined) {
            formParams = formParams.append('voicePerformer', <any>voicePerformer) as any || formParams;
        }
        if (voyPerformer !== undefined) {
            formParams = formParams.append('voyPerformer', <any>voyPerformer) as any || formParams;
        }

        return this.httpClient.request<PerformerBaseResponse>('post',`${this.basePath}/v1/rest/performer/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single performer (V2)
     * @param uid Performer unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetPerformer(uid: string, observe?: 'body', reportProgress?: boolean): Observable<PerformerV2FullResponse>;
    public v2GetPerformer(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerV2FullResponse>>;
    public v2GetPerformer(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerV2FullResponse>>;
    public v2GetPerformer(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetPerformer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PerformerV2FullResponse>('get',`${this.basePath}/v2/rest/performer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over performers (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<PerformerV2BaseResponse>;
    public v2PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerV2BaseResponse>>;
    public v2PagePerformers(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerV2BaseResponse>>;
    public v2PagePerformers(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PerformerV2BaseResponse>('get',`${this.basePath}/v2/rest/performer/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching performers (V2)
     * @param name 
     * @param birthName 
     * @param gender 
     * @param dateOfBirthFrom 
     * @param dateOfBirthTo 
     * @param placeOfBirth 
     * @param dateOfDeathFrom 
     * @param dateOfDeathTo 
     * @param placeOfDeath 
     * @param animalPerformer 
     * @param audiobookPerformer 
     * @param cutPerformer 
     * @param disPerformer 
     * @param ds9Performer 
     * @param entPerformer 
     * @param filmPerformer 
     * @param ldPerformer 
     * @param picPerformer 
     * @param proPerformer 
     * @param puppeteer 
     * @param snwPerformer 
     * @param standInPerformer 
     * @param stPerformer 
     * @param stuntPerformer 
     * @param tasPerformer 
     * @param tngPerformer 
     * @param tosPerformer 
     * @param videoGamePerformer 
     * @param voicePerformer 
     * @param voyPerformer 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, audiobookPerformer?: boolean, cutPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, ldPerformer?: boolean, picPerformer?: boolean, proPerformer?: boolean, puppeteer?: boolean, snwPerformer?: boolean, standInPerformer?: boolean, stPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<PerformerV2BaseResponse>;
    public v2SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, audiobookPerformer?: boolean, cutPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, ldPerformer?: boolean, picPerformer?: boolean, proPerformer?: boolean, puppeteer?: boolean, snwPerformer?: boolean, standInPerformer?: boolean, stPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PerformerV2BaseResponse>>;
    public v2SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, audiobookPerformer?: boolean, cutPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, ldPerformer?: boolean, picPerformer?: boolean, proPerformer?: boolean, puppeteer?: boolean, snwPerformer?: boolean, standInPerformer?: boolean, stPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PerformerV2BaseResponse>>;
    public v2SearchPerformersForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, animalPerformer?: boolean, audiobookPerformer?: boolean, cutPerformer?: boolean, disPerformer?: boolean, ds9Performer?: boolean, entPerformer?: boolean, filmPerformer?: boolean, ldPerformer?: boolean, picPerformer?: boolean, proPerformer?: boolean, puppeteer?: boolean, snwPerformer?: boolean, standInPerformer?: boolean, stPerformer?: boolean, stuntPerformer?: boolean, tasPerformer?: boolean, tngPerformer?: boolean, tosPerformer?: boolean, videoGamePerformer?: boolean, voicePerformer?: boolean, voyPerformer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (birthName !== undefined) {
            formParams = formParams.append('birthName', <any>birthName) as any || formParams;
        }
        if (gender !== undefined) {
            formParams = formParams.append('gender', <any>gender) as any || formParams;
        }
        if (dateOfBirthFrom !== undefined) {
            formParams = formParams.append('dateOfBirthFrom', <any>dateOfBirthFrom) as any || formParams;
        }
        if (dateOfBirthTo !== undefined) {
            formParams = formParams.append('dateOfBirthTo', <any>dateOfBirthTo) as any || formParams;
        }
        if (placeOfBirth !== undefined) {
            formParams = formParams.append('placeOfBirth', <any>placeOfBirth) as any || formParams;
        }
        if (dateOfDeathFrom !== undefined) {
            formParams = formParams.append('dateOfDeathFrom', <any>dateOfDeathFrom) as any || formParams;
        }
        if (dateOfDeathTo !== undefined) {
            formParams = formParams.append('dateOfDeathTo', <any>dateOfDeathTo) as any || formParams;
        }
        if (placeOfDeath !== undefined) {
            formParams = formParams.append('placeOfDeath', <any>placeOfDeath) as any || formParams;
        }
        if (animalPerformer !== undefined) {
            formParams = formParams.append('animalPerformer', <any>animalPerformer) as any || formParams;
        }
        if (audiobookPerformer !== undefined) {
            formParams = formParams.append('audiobookPerformer', <any>audiobookPerformer) as any || formParams;
        }
        if (cutPerformer !== undefined) {
            formParams = formParams.append('cutPerformer', <any>cutPerformer) as any || formParams;
        }
        if (disPerformer !== undefined) {
            formParams = formParams.append('disPerformer', <any>disPerformer) as any || formParams;
        }
        if (ds9Performer !== undefined) {
            formParams = formParams.append('ds9Performer', <any>ds9Performer) as any || formParams;
        }
        if (entPerformer !== undefined) {
            formParams = formParams.append('entPerformer', <any>entPerformer) as any || formParams;
        }
        if (filmPerformer !== undefined) {
            formParams = formParams.append('filmPerformer', <any>filmPerformer) as any || formParams;
        }
        if (ldPerformer !== undefined) {
            formParams = formParams.append('ldPerformer', <any>ldPerformer) as any || formParams;
        }
        if (picPerformer !== undefined) {
            formParams = formParams.append('picPerformer', <any>picPerformer) as any || formParams;
        }
        if (proPerformer !== undefined) {
            formParams = formParams.append('proPerformer', <any>proPerformer) as any || formParams;
        }
        if (puppeteer !== undefined) {
            formParams = formParams.append('puppeteer', <any>puppeteer) as any || formParams;
        }
        if (snwPerformer !== undefined) {
            formParams = formParams.append('snwPerformer', <any>snwPerformer) as any || formParams;
        }
        if (standInPerformer !== undefined) {
            formParams = formParams.append('standInPerformer', <any>standInPerformer) as any || formParams;
        }
        if (stPerformer !== undefined) {
            formParams = formParams.append('stPerformer', <any>stPerformer) as any || formParams;
        }
        if (stuntPerformer !== undefined) {
            formParams = formParams.append('stuntPerformer', <any>stuntPerformer) as any || formParams;
        }
        if (tasPerformer !== undefined) {
            formParams = formParams.append('tasPerformer', <any>tasPerformer) as any || formParams;
        }
        if (tngPerformer !== undefined) {
            formParams = formParams.append('tngPerformer', <any>tngPerformer) as any || formParams;
        }
        if (tosPerformer !== undefined) {
            formParams = formParams.append('tosPerformer', <any>tosPerformer) as any || formParams;
        }
        if (videoGamePerformer !== undefined) {
            formParams = formParams.append('videoGamePerformer', <any>videoGamePerformer) as any || formParams;
        }
        if (voicePerformer !== undefined) {
            formParams = formParams.append('voicePerformer', <any>voicePerformer) as any || formParams;
        }
        if (voyPerformer !== undefined) {
            formParams = formParams.append('voyPerformer', <any>voyPerformer) as any || formParams;
        }

        return this.httpClient.request<PerformerV2BaseResponse>('post',`${this.basePath}/v2/rest/performer/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
