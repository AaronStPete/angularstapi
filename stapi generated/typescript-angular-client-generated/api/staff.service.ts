/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { StaffBaseResponse } from '../model/staffBaseResponse';
import { StaffFullResponse } from '../model/staffFullResponse';
import { StaffV2BaseResponse } from '../model/staffV2BaseResponse';
import { StaffV2FullResponse } from '../model/staffV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StaffService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single staff member
     * @param uid Staff unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetStaff(uid: string, observe?: 'body', reportProgress?: boolean): Observable<StaffFullResponse>;
    public v1GetStaff(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffFullResponse>>;
    public v1GetStaff(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffFullResponse>>;
    public v1GetStaff(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetStaff.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StaffFullResponse>('get',`${this.basePath}/v1/rest/staff`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over staff members
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageStaff(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<StaffBaseResponse>;
    public v1PageStaff(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffBaseResponse>>;
    public v1PageStaff(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffBaseResponse>>;
    public v1PageStaff(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StaffBaseResponse>('get',`${this.basePath}/v1/rest/staff/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching staff members
     * @param name 
     * @param birthName 
     * @param gender 
     * @param dateOfBirthFrom 
     * @param dateOfBirthTo 
     * @param placeOfBirth 
     * @param dateOfDeathFrom 
     * @param dateOfDeathTo 
     * @param placeOfDeath 
     * @param artDepartment 
     * @param artDirector 
     * @param productionDesigner 
     * @param cameraAndElectricalDepartment 
     * @param cinematographer 
     * @param castingDepartment 
     * @param costumeDepartment 
     * @param costumeDesigner 
     * @param director 
     * @param assistantOrSecondUnitDirector 
     * @param exhibitAndAttractionStaff 
     * @param filmEditor 
     * @param linguist 
     * @param locationStaff 
     * @param makeupStaff 
     * @param musicDepartment 
     * @param composer 
     * @param personalAssistant 
     * @param producer 
     * @param productionAssociate 
     * @param productionStaff 
     * @param publicationStaff 
     * @param scienceConsultant 
     * @param soundDepartment 
     * @param specialAndVisualEffectsStaff 
     * @param author 
     * @param audioAuthor 
     * @param calendarArtist 
     * @param comicArtist 
     * @param comicAuthor 
     * @param comicColorArtist 
     * @param comicInteriorArtist 
     * @param comicInkArtist 
     * @param comicPencilArtist 
     * @param comicLetterArtist 
     * @param comicStripArtist 
     * @param gameArtist 
     * @param gameAuthor 
     * @param novelArtist 
     * @param novelAuthor 
     * @param referenceArtist 
     * @param referenceAuthor 
     * @param publicationArtist 
     * @param publicationDesigner 
     * @param publicationEditor 
     * @param publicityArtist 
     * @param cbsDigitalStaff 
     * @param ilmProductionStaff 
     * @param specialFeaturesStaff 
     * @param storyEditor 
     * @param studioExecutive 
     * @param stuntDepartment 
     * @param transportationDepartment 
     * @param videoGameProductionStaff 
     * @param writer 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<StaffBaseResponse>;
    public v1SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffBaseResponse>>;
    public v1SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffBaseResponse>>;
    public v1SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (birthName !== undefined) {
            formParams = formParams.append('birthName', <any>birthName) as any || formParams;
        }
        if (gender !== undefined) {
            formParams = formParams.append('gender', <any>gender) as any || formParams;
        }
        if (dateOfBirthFrom !== undefined) {
            formParams = formParams.append('dateOfBirthFrom', <any>dateOfBirthFrom) as any || formParams;
        }
        if (dateOfBirthTo !== undefined) {
            formParams = formParams.append('dateOfBirthTo', <any>dateOfBirthTo) as any || formParams;
        }
        if (placeOfBirth !== undefined) {
            formParams = formParams.append('placeOfBirth', <any>placeOfBirth) as any || formParams;
        }
        if (dateOfDeathFrom !== undefined) {
            formParams = formParams.append('dateOfDeathFrom', <any>dateOfDeathFrom) as any || formParams;
        }
        if (dateOfDeathTo !== undefined) {
            formParams = formParams.append('dateOfDeathTo', <any>dateOfDeathTo) as any || formParams;
        }
        if (placeOfDeath !== undefined) {
            formParams = formParams.append('placeOfDeath', <any>placeOfDeath) as any || formParams;
        }
        if (artDepartment !== undefined) {
            formParams = formParams.append('artDepartment', <any>artDepartment) as any || formParams;
        }
        if (artDirector !== undefined) {
            formParams = formParams.append('artDirector', <any>artDirector) as any || formParams;
        }
        if (productionDesigner !== undefined) {
            formParams = formParams.append('productionDesigner', <any>productionDesigner) as any || formParams;
        }
        if (cameraAndElectricalDepartment !== undefined) {
            formParams = formParams.append('cameraAndElectricalDepartment', <any>cameraAndElectricalDepartment) as any || formParams;
        }
        if (cinematographer !== undefined) {
            formParams = formParams.append('cinematographer', <any>cinematographer) as any || formParams;
        }
        if (castingDepartment !== undefined) {
            formParams = formParams.append('castingDepartment', <any>castingDepartment) as any || formParams;
        }
        if (costumeDepartment !== undefined) {
            formParams = formParams.append('costumeDepartment', <any>costumeDepartment) as any || formParams;
        }
        if (costumeDesigner !== undefined) {
            formParams = formParams.append('costumeDesigner', <any>costumeDesigner) as any || formParams;
        }
        if (director !== undefined) {
            formParams = formParams.append('director', <any>director) as any || formParams;
        }
        if (assistantOrSecondUnitDirector !== undefined) {
            formParams = formParams.append('assistantOrSecondUnitDirector', <any>assistantOrSecondUnitDirector) as any || formParams;
        }
        if (exhibitAndAttractionStaff !== undefined) {
            formParams = formParams.append('exhibitAndAttractionStaff', <any>exhibitAndAttractionStaff) as any || formParams;
        }
        if (filmEditor !== undefined) {
            formParams = formParams.append('filmEditor', <any>filmEditor) as any || formParams;
        }
        if (linguist !== undefined) {
            formParams = formParams.append('linguist', <any>linguist) as any || formParams;
        }
        if (locationStaff !== undefined) {
            formParams = formParams.append('locationStaff', <any>locationStaff) as any || formParams;
        }
        if (makeupStaff !== undefined) {
            formParams = formParams.append('makeupStaff', <any>makeupStaff) as any || formParams;
        }
        if (musicDepartment !== undefined) {
            formParams = formParams.append('musicDepartment', <any>musicDepartment) as any || formParams;
        }
        if (composer !== undefined) {
            formParams = formParams.append('composer', <any>composer) as any || formParams;
        }
        if (personalAssistant !== undefined) {
            formParams = formParams.append('personalAssistant', <any>personalAssistant) as any || formParams;
        }
        if (producer !== undefined) {
            formParams = formParams.append('producer', <any>producer) as any || formParams;
        }
        if (productionAssociate !== undefined) {
            formParams = formParams.append('productionAssociate', <any>productionAssociate) as any || formParams;
        }
        if (productionStaff !== undefined) {
            formParams = formParams.append('productionStaff', <any>productionStaff) as any || formParams;
        }
        if (publicationStaff !== undefined) {
            formParams = formParams.append('publicationStaff', <any>publicationStaff) as any || formParams;
        }
        if (scienceConsultant !== undefined) {
            formParams = formParams.append('scienceConsultant', <any>scienceConsultant) as any || formParams;
        }
        if (soundDepartment !== undefined) {
            formParams = formParams.append('soundDepartment', <any>soundDepartment) as any || formParams;
        }
        if (specialAndVisualEffectsStaff !== undefined) {
            formParams = formParams.append('specialAndVisualEffectsStaff', <any>specialAndVisualEffectsStaff) as any || formParams;
        }
        if (author !== undefined) {
            formParams = formParams.append('author', <any>author) as any || formParams;
        }
        if (audioAuthor !== undefined) {
            formParams = formParams.append('audioAuthor', <any>audioAuthor) as any || formParams;
        }
        if (calendarArtist !== undefined) {
            formParams = formParams.append('calendarArtist', <any>calendarArtist) as any || formParams;
        }
        if (comicArtist !== undefined) {
            formParams = formParams.append('comicArtist', <any>comicArtist) as any || formParams;
        }
        if (comicAuthor !== undefined) {
            formParams = formParams.append('comicAuthor', <any>comicAuthor) as any || formParams;
        }
        if (comicColorArtist !== undefined) {
            formParams = formParams.append('comicColorArtist', <any>comicColorArtist) as any || formParams;
        }
        if (comicInteriorArtist !== undefined) {
            formParams = formParams.append('comicInteriorArtist', <any>comicInteriorArtist) as any || formParams;
        }
        if (comicInkArtist !== undefined) {
            formParams = formParams.append('comicInkArtist', <any>comicInkArtist) as any || formParams;
        }
        if (comicPencilArtist !== undefined) {
            formParams = formParams.append('comicPencilArtist', <any>comicPencilArtist) as any || formParams;
        }
        if (comicLetterArtist !== undefined) {
            formParams = formParams.append('comicLetterArtist', <any>comicLetterArtist) as any || formParams;
        }
        if (comicStripArtist !== undefined) {
            formParams = formParams.append('comicStripArtist', <any>comicStripArtist) as any || formParams;
        }
        if (gameArtist !== undefined) {
            formParams = formParams.append('gameArtist', <any>gameArtist) as any || formParams;
        }
        if (gameAuthor !== undefined) {
            formParams = formParams.append('gameAuthor', <any>gameAuthor) as any || formParams;
        }
        if (novelArtist !== undefined) {
            formParams = formParams.append('novelArtist', <any>novelArtist) as any || formParams;
        }
        if (novelAuthor !== undefined) {
            formParams = formParams.append('novelAuthor', <any>novelAuthor) as any || formParams;
        }
        if (referenceArtist !== undefined) {
            formParams = formParams.append('referenceArtist', <any>referenceArtist) as any || formParams;
        }
        if (referenceAuthor !== undefined) {
            formParams = formParams.append('referenceAuthor', <any>referenceAuthor) as any || formParams;
        }
        if (publicationArtist !== undefined) {
            formParams = formParams.append('publicationArtist', <any>publicationArtist) as any || formParams;
        }
        if (publicationDesigner !== undefined) {
            formParams = formParams.append('publicationDesigner', <any>publicationDesigner) as any || formParams;
        }
        if (publicationEditor !== undefined) {
            formParams = formParams.append('publicationEditor', <any>publicationEditor) as any || formParams;
        }
        if (publicityArtist !== undefined) {
            formParams = formParams.append('publicityArtist', <any>publicityArtist) as any || formParams;
        }
        if (cbsDigitalStaff !== undefined) {
            formParams = formParams.append('cbsDigitalStaff', <any>cbsDigitalStaff) as any || formParams;
        }
        if (ilmProductionStaff !== undefined) {
            formParams = formParams.append('ilmProductionStaff', <any>ilmProductionStaff) as any || formParams;
        }
        if (specialFeaturesStaff !== undefined) {
            formParams = formParams.append('specialFeaturesStaff', <any>specialFeaturesStaff) as any || formParams;
        }
        if (storyEditor !== undefined) {
            formParams = formParams.append('storyEditor', <any>storyEditor) as any || formParams;
        }
        if (studioExecutive !== undefined) {
            formParams = formParams.append('studioExecutive', <any>studioExecutive) as any || formParams;
        }
        if (stuntDepartment !== undefined) {
            formParams = formParams.append('stuntDepartment', <any>stuntDepartment) as any || formParams;
        }
        if (transportationDepartment !== undefined) {
            formParams = formParams.append('transportationDepartment', <any>transportationDepartment) as any || formParams;
        }
        if (videoGameProductionStaff !== undefined) {
            formParams = formParams.append('videoGameProductionStaff', <any>videoGameProductionStaff) as any || formParams;
        }
        if (writer !== undefined) {
            formParams = formParams.append('writer', <any>writer) as any || formParams;
        }

        return this.httpClient.request<StaffBaseResponse>('post',`${this.basePath}/v1/rest/staff/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single staff member (V2)
     * @param uid Staff unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetStaff(uid: string, observe?: 'body', reportProgress?: boolean): Observable<StaffV2FullResponse>;
    public v2GetStaff(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffV2FullResponse>>;
    public v2GetStaff(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffV2FullResponse>>;
    public v2GetStaff(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetStaff.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StaffV2FullResponse>('get',`${this.basePath}/v2/rest/staff`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over staff members (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageStaff(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<StaffV2BaseResponse>;
    public v2PageStaff(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffV2BaseResponse>>;
    public v2PageStaff(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffV2BaseResponse>>;
    public v2PageStaff(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StaffV2BaseResponse>('get',`${this.basePath}/v2/rest/staff/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching staff members (v2)
     * @param name 
     * @param birthName 
     * @param gender 
     * @param dateOfBirthFrom 
     * @param dateOfBirthTo 
     * @param placeOfBirth 
     * @param dateOfDeathFrom 
     * @param dateOfDeathTo 
     * @param placeOfDeath 
     * @param artDepartment 
     * @param artDirector 
     * @param productionDesigner 
     * @param cameraAndElectricalDepartment 
     * @param cinematographer 
     * @param castingDepartment 
     * @param costumeDepartment 
     * @param costumeDesigner 
     * @param director 
     * @param assistantOrSecondUnitDirector 
     * @param exhibitAndAttractionStaff 
     * @param filmEditor 
     * @param filmationProductionStaff 
     * @param linguist 
     * @param locationStaff 
     * @param makeupStaff 
     * @param merchandiseStaff 
     * @param musicDepartment 
     * @param composer 
     * @param personalAssistant 
     * @param producer 
     * @param productionAssociate 
     * @param productionStaff 
     * @param publicationStaff 
     * @param scienceConsultant 
     * @param soundDepartment 
     * @param specialAndVisualEffectsStaff 
     * @param author 
     * @param audioAuthor 
     * @param calendarArtist 
     * @param comicArtist 
     * @param comicAuthor 
     * @param comicColorArtist 
     * @param comicCoverArtist 
     * @param comicInteriorArtist 
     * @param comicInkArtist 
     * @param comicPencilArtist 
     * @param comicLetterArtist 
     * @param comicStripArtist 
     * @param gameArtist 
     * @param gameAuthor 
     * @param novelArtist 
     * @param novelAuthor 
     * @param referenceArtist 
     * @param referenceAuthor 
     * @param publicationArtist 
     * @param publicationDesigner 
     * @param publicationEditor 
     * @param publicityArtist 
     * @param cbsDigitalStaff 
     * @param ilmProductionStaff 
     * @param specialFeaturesStaff 
     * @param storyEditor 
     * @param studioExecutive 
     * @param stuntDepartment 
     * @param transportationDepartment 
     * @param videoGameProductionStaff 
     * @param writer 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, filmationProductionStaff?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, merchandiseStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicCoverArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<StaffV2BaseResponse>;
    public v2SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, filmationProductionStaff?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, merchandiseStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicCoverArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StaffV2BaseResponse>>;
    public v2SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, filmationProductionStaff?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, merchandiseStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicCoverArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StaffV2BaseResponse>>;
    public v2SearchStaffForm(name?: string, birthName?: string, gender?: string, dateOfBirthFrom?: string, dateOfBirthTo?: string, placeOfBirth?: string, dateOfDeathFrom?: string, dateOfDeathTo?: string, placeOfDeath?: string, artDepartment?: boolean, artDirector?: boolean, productionDesigner?: boolean, cameraAndElectricalDepartment?: boolean, cinematographer?: boolean, castingDepartment?: boolean, costumeDepartment?: boolean, costumeDesigner?: boolean, director?: boolean, assistantOrSecondUnitDirector?: boolean, exhibitAndAttractionStaff?: boolean, filmEditor?: boolean, filmationProductionStaff?: boolean, linguist?: boolean, locationStaff?: boolean, makeupStaff?: boolean, merchandiseStaff?: boolean, musicDepartment?: boolean, composer?: boolean, personalAssistant?: boolean, producer?: boolean, productionAssociate?: boolean, productionStaff?: boolean, publicationStaff?: boolean, scienceConsultant?: boolean, soundDepartment?: boolean, specialAndVisualEffectsStaff?: boolean, author?: boolean, audioAuthor?: boolean, calendarArtist?: boolean, comicArtist?: boolean, comicAuthor?: boolean, comicColorArtist?: boolean, comicCoverArtist?: boolean, comicInteriorArtist?: boolean, comicInkArtist?: boolean, comicPencilArtist?: boolean, comicLetterArtist?: boolean, comicStripArtist?: boolean, gameArtist?: boolean, gameAuthor?: boolean, novelArtist?: boolean, novelAuthor?: boolean, referenceArtist?: boolean, referenceAuthor?: boolean, publicationArtist?: boolean, publicationDesigner?: boolean, publicationEditor?: boolean, publicityArtist?: boolean, cbsDigitalStaff?: boolean, ilmProductionStaff?: boolean, specialFeaturesStaff?: boolean, storyEditor?: boolean, studioExecutive?: boolean, stuntDepartment?: boolean, transportationDepartment?: boolean, videoGameProductionStaff?: boolean, writer?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (birthName !== undefined) {
            formParams = formParams.append('birthName', <any>birthName) as any || formParams;
        }
        if (gender !== undefined) {
            formParams = formParams.append('gender', <any>gender) as any || formParams;
        }
        if (dateOfBirthFrom !== undefined) {
            formParams = formParams.append('dateOfBirthFrom', <any>dateOfBirthFrom) as any || formParams;
        }
        if (dateOfBirthTo !== undefined) {
            formParams = formParams.append('dateOfBirthTo', <any>dateOfBirthTo) as any || formParams;
        }
        if (placeOfBirth !== undefined) {
            formParams = formParams.append('placeOfBirth', <any>placeOfBirth) as any || formParams;
        }
        if (dateOfDeathFrom !== undefined) {
            formParams = formParams.append('dateOfDeathFrom', <any>dateOfDeathFrom) as any || formParams;
        }
        if (dateOfDeathTo !== undefined) {
            formParams = formParams.append('dateOfDeathTo', <any>dateOfDeathTo) as any || formParams;
        }
        if (placeOfDeath !== undefined) {
            formParams = formParams.append('placeOfDeath', <any>placeOfDeath) as any || formParams;
        }
        if (artDepartment !== undefined) {
            formParams = formParams.append('artDepartment', <any>artDepartment) as any || formParams;
        }
        if (artDirector !== undefined) {
            formParams = formParams.append('artDirector', <any>artDirector) as any || formParams;
        }
        if (productionDesigner !== undefined) {
            formParams = formParams.append('productionDesigner', <any>productionDesigner) as any || formParams;
        }
        if (cameraAndElectricalDepartment !== undefined) {
            formParams = formParams.append('cameraAndElectricalDepartment', <any>cameraAndElectricalDepartment) as any || formParams;
        }
        if (cinematographer !== undefined) {
            formParams = formParams.append('cinematographer', <any>cinematographer) as any || formParams;
        }
        if (castingDepartment !== undefined) {
            formParams = formParams.append('castingDepartment', <any>castingDepartment) as any || formParams;
        }
        if (costumeDepartment !== undefined) {
            formParams = formParams.append('costumeDepartment', <any>costumeDepartment) as any || formParams;
        }
        if (costumeDesigner !== undefined) {
            formParams = formParams.append('costumeDesigner', <any>costumeDesigner) as any || formParams;
        }
        if (director !== undefined) {
            formParams = formParams.append('director', <any>director) as any || formParams;
        }
        if (assistantOrSecondUnitDirector !== undefined) {
            formParams = formParams.append('assistantOrSecondUnitDirector', <any>assistantOrSecondUnitDirector) as any || formParams;
        }
        if (exhibitAndAttractionStaff !== undefined) {
            formParams = formParams.append('exhibitAndAttractionStaff', <any>exhibitAndAttractionStaff) as any || formParams;
        }
        if (filmEditor !== undefined) {
            formParams = formParams.append('filmEditor', <any>filmEditor) as any || formParams;
        }
        if (filmationProductionStaff !== undefined) {
            formParams = formParams.append('filmationProductionStaff', <any>filmationProductionStaff) as any || formParams;
        }
        if (linguist !== undefined) {
            formParams = formParams.append('linguist', <any>linguist) as any || formParams;
        }
        if (locationStaff !== undefined) {
            formParams = formParams.append('locationStaff', <any>locationStaff) as any || formParams;
        }
        if (makeupStaff !== undefined) {
            formParams = formParams.append('makeupStaff', <any>makeupStaff) as any || formParams;
        }
        if (merchandiseStaff !== undefined) {
            formParams = formParams.append('merchandiseStaff', <any>merchandiseStaff) as any || formParams;
        }
        if (musicDepartment !== undefined) {
            formParams = formParams.append('musicDepartment', <any>musicDepartment) as any || formParams;
        }
        if (composer !== undefined) {
            formParams = formParams.append('composer', <any>composer) as any || formParams;
        }
        if (personalAssistant !== undefined) {
            formParams = formParams.append('personalAssistant', <any>personalAssistant) as any || formParams;
        }
        if (producer !== undefined) {
            formParams = formParams.append('producer', <any>producer) as any || formParams;
        }
        if (productionAssociate !== undefined) {
            formParams = formParams.append('productionAssociate', <any>productionAssociate) as any || formParams;
        }
        if (productionStaff !== undefined) {
            formParams = formParams.append('productionStaff', <any>productionStaff) as any || formParams;
        }
        if (publicationStaff !== undefined) {
            formParams = formParams.append('publicationStaff', <any>publicationStaff) as any || formParams;
        }
        if (scienceConsultant !== undefined) {
            formParams = formParams.append('scienceConsultant', <any>scienceConsultant) as any || formParams;
        }
        if (soundDepartment !== undefined) {
            formParams = formParams.append('soundDepartment', <any>soundDepartment) as any || formParams;
        }
        if (specialAndVisualEffectsStaff !== undefined) {
            formParams = formParams.append('specialAndVisualEffectsStaff', <any>specialAndVisualEffectsStaff) as any || formParams;
        }
        if (author !== undefined) {
            formParams = formParams.append('author', <any>author) as any || formParams;
        }
        if (audioAuthor !== undefined) {
            formParams = formParams.append('audioAuthor', <any>audioAuthor) as any || formParams;
        }
        if (calendarArtist !== undefined) {
            formParams = formParams.append('calendarArtist', <any>calendarArtist) as any || formParams;
        }
        if (comicArtist !== undefined) {
            formParams = formParams.append('comicArtist', <any>comicArtist) as any || formParams;
        }
        if (comicAuthor !== undefined) {
            formParams = formParams.append('comicAuthor', <any>comicAuthor) as any || formParams;
        }
        if (comicColorArtist !== undefined) {
            formParams = formParams.append('comicColorArtist', <any>comicColorArtist) as any || formParams;
        }
        if (comicCoverArtist !== undefined) {
            formParams = formParams.append('comicCoverArtist', <any>comicCoverArtist) as any || formParams;
        }
        if (comicInteriorArtist !== undefined) {
            formParams = formParams.append('comicInteriorArtist', <any>comicInteriorArtist) as any || formParams;
        }
        if (comicInkArtist !== undefined) {
            formParams = formParams.append('comicInkArtist', <any>comicInkArtist) as any || formParams;
        }
        if (comicPencilArtist !== undefined) {
            formParams = formParams.append('comicPencilArtist', <any>comicPencilArtist) as any || formParams;
        }
        if (comicLetterArtist !== undefined) {
            formParams = formParams.append('comicLetterArtist', <any>comicLetterArtist) as any || formParams;
        }
        if (comicStripArtist !== undefined) {
            formParams = formParams.append('comicStripArtist', <any>comicStripArtist) as any || formParams;
        }
        if (gameArtist !== undefined) {
            formParams = formParams.append('gameArtist', <any>gameArtist) as any || formParams;
        }
        if (gameAuthor !== undefined) {
            formParams = formParams.append('gameAuthor', <any>gameAuthor) as any || formParams;
        }
        if (novelArtist !== undefined) {
            formParams = formParams.append('novelArtist', <any>novelArtist) as any || formParams;
        }
        if (novelAuthor !== undefined) {
            formParams = formParams.append('novelAuthor', <any>novelAuthor) as any || formParams;
        }
        if (referenceArtist !== undefined) {
            formParams = formParams.append('referenceArtist', <any>referenceArtist) as any || formParams;
        }
        if (referenceAuthor !== undefined) {
            formParams = formParams.append('referenceAuthor', <any>referenceAuthor) as any || formParams;
        }
        if (publicationArtist !== undefined) {
            formParams = formParams.append('publicationArtist', <any>publicationArtist) as any || formParams;
        }
        if (publicationDesigner !== undefined) {
            formParams = formParams.append('publicationDesigner', <any>publicationDesigner) as any || formParams;
        }
        if (publicationEditor !== undefined) {
            formParams = formParams.append('publicationEditor', <any>publicationEditor) as any || formParams;
        }
        if (publicityArtist !== undefined) {
            formParams = formParams.append('publicityArtist', <any>publicityArtist) as any || formParams;
        }
        if (cbsDigitalStaff !== undefined) {
            formParams = formParams.append('cbsDigitalStaff', <any>cbsDigitalStaff) as any || formParams;
        }
        if (ilmProductionStaff !== undefined) {
            formParams = formParams.append('ilmProductionStaff', <any>ilmProductionStaff) as any || formParams;
        }
        if (specialFeaturesStaff !== undefined) {
            formParams = formParams.append('specialFeaturesStaff', <any>specialFeaturesStaff) as any || formParams;
        }
        if (storyEditor !== undefined) {
            formParams = formParams.append('storyEditor', <any>storyEditor) as any || formParams;
        }
        if (studioExecutive !== undefined) {
            formParams = formParams.append('studioExecutive', <any>studioExecutive) as any || formParams;
        }
        if (stuntDepartment !== undefined) {
            formParams = formParams.append('stuntDepartment', <any>stuntDepartment) as any || formParams;
        }
        if (transportationDepartment !== undefined) {
            formParams = formParams.append('transportationDepartment', <any>transportationDepartment) as any || formParams;
        }
        if (videoGameProductionStaff !== undefined) {
            formParams = formParams.append('videoGameProductionStaff', <any>videoGameProductionStaff) as any || formParams;
        }
        if (writer !== undefined) {
            formParams = formParams.append('writer', <any>writer) as any || formParams;
        }

        return this.httpClient.request<StaffV2BaseResponse>('post',`${this.basePath}/v2/rest/staff/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
