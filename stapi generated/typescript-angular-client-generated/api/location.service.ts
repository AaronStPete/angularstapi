/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { LocationBaseResponse } from '../model/locationBaseResponse';
import { LocationFullResponse } from '../model/locationFullResponse';
import { LocationV2BaseResponse } from '../model/locationV2BaseResponse';
import { LocationV2FullResponse } from '../model/locationV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LocationService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single location
     * @param uid Location unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetLocation(uid: string, observe?: 'body', reportProgress?: boolean): Observable<LocationFullResponse>;
    public v1GetLocation(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationFullResponse>>;
    public v1GetLocation(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationFullResponse>>;
    public v1GetLocation(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetLocation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LocationFullResponse>('get',`${this.basePath}/v1/rest/location`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over locations
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageLocations(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationBaseResponse>;
    public v1PageLocations(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationBaseResponse>>;
    public v1PageLocations(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationBaseResponse>>;
    public v1PageLocations(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LocationBaseResponse>('get',`${this.basePath}/v1/rest/location/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching locations
     * @param name 
     * @param earthlyLocation 
     * @param fictionalLocation 
     * @param religiousLocation 
     * @param geographicalLocation 
     * @param bodyOfWater 
     * @param country 
     * @param subnationalEntity 
     * @param settlement 
     * @param usSettlement 
     * @param bajoranSettlement 
     * @param colony 
     * @param landform 
     * @param landmark 
     * @param road 
     * @param structure 
     * @param shipyard 
     * @param buildingInterior 
     * @param establishment 
     * @param medicalEstablishment 
     * @param ds9Establishment 
     * @param school 
     * @param mirror 
     * @param alternateReality 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchLocationsForm(name?: string, earthlyLocation?: boolean, fictionalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, landmark?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<LocationBaseResponse>;
    public v1SearchLocationsForm(name?: string, earthlyLocation?: boolean, fictionalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, landmark?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationBaseResponse>>;
    public v1SearchLocationsForm(name?: string, earthlyLocation?: boolean, fictionalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, landmark?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationBaseResponse>>;
    public v1SearchLocationsForm(name?: string, earthlyLocation?: boolean, fictionalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, landmark?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (earthlyLocation !== undefined) {
            formParams = formParams.append('earthlyLocation', <any>earthlyLocation) as any || formParams;
        }
        if (fictionalLocation !== undefined) {
            formParams = formParams.append('fictionalLocation', <any>fictionalLocation) as any || formParams;
        }
        if (religiousLocation !== undefined) {
            formParams = formParams.append('religiousLocation', <any>religiousLocation) as any || formParams;
        }
        if (geographicalLocation !== undefined) {
            formParams = formParams.append('geographicalLocation', <any>geographicalLocation) as any || formParams;
        }
        if (bodyOfWater !== undefined) {
            formParams = formParams.append('bodyOfWater', <any>bodyOfWater) as any || formParams;
        }
        if (country !== undefined) {
            formParams = formParams.append('country', <any>country) as any || formParams;
        }
        if (subnationalEntity !== undefined) {
            formParams = formParams.append('subnationalEntity', <any>subnationalEntity) as any || formParams;
        }
        if (settlement !== undefined) {
            formParams = formParams.append('settlement', <any>settlement) as any || formParams;
        }
        if (usSettlement !== undefined) {
            formParams = formParams.append('usSettlement', <any>usSettlement) as any || formParams;
        }
        if (bajoranSettlement !== undefined) {
            formParams = formParams.append('bajoranSettlement', <any>bajoranSettlement) as any || formParams;
        }
        if (colony !== undefined) {
            formParams = formParams.append('colony', <any>colony) as any || formParams;
        }
        if (landform !== undefined) {
            formParams = formParams.append('landform', <any>landform) as any || formParams;
        }
        if (landmark !== undefined) {
            formParams = formParams.append('landmark', <any>landmark) as any || formParams;
        }
        if (road !== undefined) {
            formParams = formParams.append('road', <any>road) as any || formParams;
        }
        if (structure !== undefined) {
            formParams = formParams.append('structure', <any>structure) as any || formParams;
        }
        if (shipyard !== undefined) {
            formParams = formParams.append('shipyard', <any>shipyard) as any || formParams;
        }
        if (buildingInterior !== undefined) {
            formParams = formParams.append('buildingInterior', <any>buildingInterior) as any || formParams;
        }
        if (establishment !== undefined) {
            formParams = formParams.append('establishment', <any>establishment) as any || formParams;
        }
        if (medicalEstablishment !== undefined) {
            formParams = formParams.append('medicalEstablishment', <any>medicalEstablishment) as any || formParams;
        }
        if (ds9Establishment !== undefined) {
            formParams = formParams.append('ds9Establishment', <any>ds9Establishment) as any || formParams;
        }
        if (school !== undefined) {
            formParams = formParams.append('school', <any>school) as any || formParams;
        }
        if (mirror !== undefined) {
            formParams = formParams.append('mirror', <any>mirror) as any || formParams;
        }
        if (alternateReality !== undefined) {
            formParams = formParams.append('alternateReality', <any>alternateReality) as any || formParams;
        }

        return this.httpClient.request<LocationBaseResponse>('post',`${this.basePath}/v1/rest/location/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single location (V2)
     * @param uid Location unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetLocation(uid: string, observe?: 'body', reportProgress?: boolean): Observable<LocationV2FullResponse>;
    public v2GetLocation(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationV2FullResponse>>;
    public v2GetLocation(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationV2FullResponse>>;
    public v2GetLocation(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetLocation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LocationV2FullResponse>('get',`${this.basePath}/v2/rest/location`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over locations (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageLocations(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationV2BaseResponse>;
    public v2PageLocations(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationV2BaseResponse>>;
    public v2PageLocations(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationV2BaseResponse>>;
    public v2PageLocations(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LocationV2BaseResponse>('get',`${this.basePath}/v2/rest/location/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching locations (V2)
     * @param name 
     * @param earthlyLocation 
     * @param qonosLocation 
     * @param fictionalLocation 
     * @param mythologicalLocation 
     * @param religiousLocation 
     * @param geographicalLocation 
     * @param bodyOfWater 
     * @param country 
     * @param subnationalEntity 
     * @param settlement 
     * @param usSettlement 
     * @param bajoranSettlement 
     * @param colony 
     * @param landform 
     * @param road 
     * @param structure 
     * @param shipyard 
     * @param buildingInterior 
     * @param establishment 
     * @param medicalEstablishment 
     * @param ds9Establishment 
     * @param school 
     * @param restaurant 
     * @param residence 
     * @param mirror 
     * @param alternateReality 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchLocationsForm(name?: string, earthlyLocation?: boolean, qonosLocation?: boolean, fictionalLocation?: boolean, mythologicalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, restaurant?: boolean, residence?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<LocationV2BaseResponse>;
    public v2SearchLocationsForm(name?: string, earthlyLocation?: boolean, qonosLocation?: boolean, fictionalLocation?: boolean, mythologicalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, restaurant?: boolean, residence?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationV2BaseResponse>>;
    public v2SearchLocationsForm(name?: string, earthlyLocation?: boolean, qonosLocation?: boolean, fictionalLocation?: boolean, mythologicalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, restaurant?: boolean, residence?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationV2BaseResponse>>;
    public v2SearchLocationsForm(name?: string, earthlyLocation?: boolean, qonosLocation?: boolean, fictionalLocation?: boolean, mythologicalLocation?: boolean, religiousLocation?: boolean, geographicalLocation?: boolean, bodyOfWater?: boolean, country?: boolean, subnationalEntity?: boolean, settlement?: boolean, usSettlement?: boolean, bajoranSettlement?: boolean, colony?: boolean, landform?: boolean, road?: boolean, structure?: boolean, shipyard?: boolean, buildingInterior?: boolean, establishment?: boolean, medicalEstablishment?: boolean, ds9Establishment?: boolean, school?: boolean, restaurant?: boolean, residence?: boolean, mirror?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (earthlyLocation !== undefined) {
            formParams = formParams.append('earthlyLocation', <any>earthlyLocation) as any || formParams;
        }
        if (qonosLocation !== undefined) {
            formParams = formParams.append('qonosLocation', <any>qonosLocation) as any || formParams;
        }
        if (fictionalLocation !== undefined) {
            formParams = formParams.append('fictionalLocation', <any>fictionalLocation) as any || formParams;
        }
        if (mythologicalLocation !== undefined) {
            formParams = formParams.append('mythologicalLocation', <any>mythologicalLocation) as any || formParams;
        }
        if (religiousLocation !== undefined) {
            formParams = formParams.append('religiousLocation', <any>religiousLocation) as any || formParams;
        }
        if (geographicalLocation !== undefined) {
            formParams = formParams.append('geographicalLocation', <any>geographicalLocation) as any || formParams;
        }
        if (bodyOfWater !== undefined) {
            formParams = formParams.append('bodyOfWater', <any>bodyOfWater) as any || formParams;
        }
        if (country !== undefined) {
            formParams = formParams.append('country', <any>country) as any || formParams;
        }
        if (subnationalEntity !== undefined) {
            formParams = formParams.append('subnationalEntity', <any>subnationalEntity) as any || formParams;
        }
        if (settlement !== undefined) {
            formParams = formParams.append('settlement', <any>settlement) as any || formParams;
        }
        if (usSettlement !== undefined) {
            formParams = formParams.append('usSettlement', <any>usSettlement) as any || formParams;
        }
        if (bajoranSettlement !== undefined) {
            formParams = formParams.append('bajoranSettlement', <any>bajoranSettlement) as any || formParams;
        }
        if (colony !== undefined) {
            formParams = formParams.append('colony', <any>colony) as any || formParams;
        }
        if (landform !== undefined) {
            formParams = formParams.append('landform', <any>landform) as any || formParams;
        }
        if (road !== undefined) {
            formParams = formParams.append('road', <any>road) as any || formParams;
        }
        if (structure !== undefined) {
            formParams = formParams.append('structure', <any>structure) as any || formParams;
        }
        if (shipyard !== undefined) {
            formParams = formParams.append('shipyard', <any>shipyard) as any || formParams;
        }
        if (buildingInterior !== undefined) {
            formParams = formParams.append('buildingInterior', <any>buildingInterior) as any || formParams;
        }
        if (establishment !== undefined) {
            formParams = formParams.append('establishment', <any>establishment) as any || formParams;
        }
        if (medicalEstablishment !== undefined) {
            formParams = formParams.append('medicalEstablishment', <any>medicalEstablishment) as any || formParams;
        }
        if (ds9Establishment !== undefined) {
            formParams = formParams.append('ds9Establishment', <any>ds9Establishment) as any || formParams;
        }
        if (school !== undefined) {
            formParams = formParams.append('school', <any>school) as any || formParams;
        }
        if (restaurant !== undefined) {
            formParams = formParams.append('restaurant', <any>restaurant) as any || formParams;
        }
        if (residence !== undefined) {
            formParams = formParams.append('residence', <any>residence) as any || formParams;
        }
        if (mirror !== undefined) {
            formParams = formParams.append('mirror', <any>mirror) as any || formParams;
        }
        if (alternateReality !== undefined) {
            formParams = formParams.append('alternateReality', <any>alternateReality) as any || formParams;
        }

        return this.httpClient.request<LocationV2BaseResponse>('post',`${this.basePath}/v2/rest/location/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
