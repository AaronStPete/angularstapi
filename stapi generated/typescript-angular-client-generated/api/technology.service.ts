/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TechnologyBaseResponse } from '../model/technologyBaseResponse';
import { TechnologyFullResponse } from '../model/technologyFullResponse';
import { TechnologyV2BaseResponse } from '../model/technologyV2BaseResponse';
import { TechnologyV2FullResponse } from '../model/technologyV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TechnologyService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single technology piece
     * @param uid Technology unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetTechnology(uid: string, observe?: 'body', reportProgress?: boolean): Observable<TechnologyFullResponse>;
    public v1GetTechnology(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyFullResponse>>;
    public v1GetTechnology(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyFullResponse>>;
    public v1GetTechnology(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetTechnology.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TechnologyFullResponse>('get',`${this.basePath}/v1/rest/technology`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over technology pieces
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<TechnologyBaseResponse>;
    public v1PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyBaseResponse>>;
    public v1PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyBaseResponse>>;
    public v1PageTechnology(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TechnologyBaseResponse>('get',`${this.basePath}/v1/rest/technology/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching technology pieces
     * @param name 
     * @param borgTechnology 
     * @param borgComponent 
     * @param communicationsTechnology 
     * @param computerTechnology 
     * @param computerProgramming 
     * @param subroutine 
     * @param database 
     * @param energyTechnology 
     * @param fictionalTechnology 
     * @param holographicTechnology 
     * @param identificationTechnology 
     * @param lifeSupportTechnology 
     * @param sensorTechnology 
     * @param shieldTechnology 
     * @param tool 
     * @param culinaryTool 
     * @param engineeringTool 
     * @param householdTool 
     * @param medicalEquipment 
     * @param transporterTechnology 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<TechnologyBaseResponse>;
    public v1SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyBaseResponse>>;
    public v1SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyBaseResponse>>;
    public v1SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (borgTechnology !== undefined) {
            formParams = formParams.append('borgTechnology', <any>borgTechnology) as any || formParams;
        }
        if (borgComponent !== undefined) {
            formParams = formParams.append('borgComponent', <any>borgComponent) as any || formParams;
        }
        if (communicationsTechnology !== undefined) {
            formParams = formParams.append('communicationsTechnology', <any>communicationsTechnology) as any || formParams;
        }
        if (computerTechnology !== undefined) {
            formParams = formParams.append('computerTechnology', <any>computerTechnology) as any || formParams;
        }
        if (computerProgramming !== undefined) {
            formParams = formParams.append('computerProgramming', <any>computerProgramming) as any || formParams;
        }
        if (subroutine !== undefined) {
            formParams = formParams.append('subroutine', <any>subroutine) as any || formParams;
        }
        if (database !== undefined) {
            formParams = formParams.append('database', <any>database) as any || formParams;
        }
        if (energyTechnology !== undefined) {
            formParams = formParams.append('energyTechnology', <any>energyTechnology) as any || formParams;
        }
        if (fictionalTechnology !== undefined) {
            formParams = formParams.append('fictionalTechnology', <any>fictionalTechnology) as any || formParams;
        }
        if (holographicTechnology !== undefined) {
            formParams = formParams.append('holographicTechnology', <any>holographicTechnology) as any || formParams;
        }
        if (identificationTechnology !== undefined) {
            formParams = formParams.append('identificationTechnology', <any>identificationTechnology) as any || formParams;
        }
        if (lifeSupportTechnology !== undefined) {
            formParams = formParams.append('lifeSupportTechnology', <any>lifeSupportTechnology) as any || formParams;
        }
        if (sensorTechnology !== undefined) {
            formParams = formParams.append('sensorTechnology', <any>sensorTechnology) as any || formParams;
        }
        if (shieldTechnology !== undefined) {
            formParams = formParams.append('shieldTechnology', <any>shieldTechnology) as any || formParams;
        }
        if (tool !== undefined) {
            formParams = formParams.append('tool', <any>tool) as any || formParams;
        }
        if (culinaryTool !== undefined) {
            formParams = formParams.append('culinaryTool', <any>culinaryTool) as any || formParams;
        }
        if (engineeringTool !== undefined) {
            formParams = formParams.append('engineeringTool', <any>engineeringTool) as any || formParams;
        }
        if (householdTool !== undefined) {
            formParams = formParams.append('householdTool', <any>householdTool) as any || formParams;
        }
        if (medicalEquipment !== undefined) {
            formParams = formParams.append('medicalEquipment', <any>medicalEquipment) as any || formParams;
        }
        if (transporterTechnology !== undefined) {
            formParams = formParams.append('transporterTechnology', <any>transporterTechnology) as any || formParams;
        }

        return this.httpClient.request<TechnologyBaseResponse>('post',`${this.basePath}/v1/rest/technology/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single technology piece (V2)
     * @param uid Technology unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetTechnology(uid: string, observe?: 'body', reportProgress?: boolean): Observable<TechnologyV2FullResponse>;
    public v2GetTechnology(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyV2FullResponse>>;
    public v2GetTechnology(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyV2FullResponse>>;
    public v2GetTechnology(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetTechnology.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TechnologyV2FullResponse>('get',`${this.basePath}/v2/rest/technology`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over technology pieces (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<TechnologyV2BaseResponse>;
    public v2PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyV2BaseResponse>>;
    public v2PageTechnology(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyV2BaseResponse>>;
    public v2PageTechnology(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TechnologyV2BaseResponse>('get',`${this.basePath}/v2/rest/technology/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching technology pieces (V2)
     * @param name 
     * @param borgTechnology 
     * @param borgComponent 
     * @param communicationsTechnology 
     * @param computerTechnology 
     * @param computerProgramming 
     * @param subroutine 
     * @param database 
     * @param energyTechnology 
     * @param fictionalTechnology 
     * @param holographicTechnology 
     * @param identificationTechnology 
     * @param lifeSupportTechnology 
     * @param sensorTechnology 
     * @param shieldTechnology 
     * @param securityTechnology 
     * @param propulsionTechnology 
     * @param spacecraftComponent 
     * @param warpTechnology 
     * @param transwarpTechnology 
     * @param timeTravelTechnology 
     * @param militaryTechnology 
     * @param victualTechnology 
     * @param tool 
     * @param culinaryTool 
     * @param engineeringTool 
     * @param householdTool 
     * @param medicalEquipment 
     * @param transporterTechnology 
     * @param transportationTechnology 
     * @param weaponComponent 
     * @param artificialLifeformComponent 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, securityTechnology?: boolean, propulsionTechnology?: boolean, spacecraftComponent?: boolean, warpTechnology?: boolean, transwarpTechnology?: boolean, timeTravelTechnology?: boolean, militaryTechnology?: boolean, victualTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, transportationTechnology?: boolean, weaponComponent?: boolean, artificialLifeformComponent?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<TechnologyV2BaseResponse>;
    public v2SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, securityTechnology?: boolean, propulsionTechnology?: boolean, spacecraftComponent?: boolean, warpTechnology?: boolean, transwarpTechnology?: boolean, timeTravelTechnology?: boolean, militaryTechnology?: boolean, victualTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, transportationTechnology?: boolean, weaponComponent?: boolean, artificialLifeformComponent?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnologyV2BaseResponse>>;
    public v2SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, securityTechnology?: boolean, propulsionTechnology?: boolean, spacecraftComponent?: boolean, warpTechnology?: boolean, transwarpTechnology?: boolean, timeTravelTechnology?: boolean, militaryTechnology?: boolean, victualTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, transportationTechnology?: boolean, weaponComponent?: boolean, artificialLifeformComponent?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnologyV2BaseResponse>>;
    public v2SearchTechnologyForm(name?: string, borgTechnology?: boolean, borgComponent?: boolean, communicationsTechnology?: boolean, computerTechnology?: boolean, computerProgramming?: boolean, subroutine?: boolean, database?: boolean, energyTechnology?: boolean, fictionalTechnology?: boolean, holographicTechnology?: boolean, identificationTechnology?: boolean, lifeSupportTechnology?: boolean, sensorTechnology?: boolean, shieldTechnology?: boolean, securityTechnology?: boolean, propulsionTechnology?: boolean, spacecraftComponent?: boolean, warpTechnology?: boolean, transwarpTechnology?: boolean, timeTravelTechnology?: boolean, militaryTechnology?: boolean, victualTechnology?: boolean, tool?: boolean, culinaryTool?: boolean, engineeringTool?: boolean, householdTool?: boolean, medicalEquipment?: boolean, transporterTechnology?: boolean, transportationTechnology?: boolean, weaponComponent?: boolean, artificialLifeformComponent?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (borgTechnology !== undefined) {
            formParams = formParams.append('borgTechnology', <any>borgTechnology) as any || formParams;
        }
        if (borgComponent !== undefined) {
            formParams = formParams.append('borgComponent', <any>borgComponent) as any || formParams;
        }
        if (communicationsTechnology !== undefined) {
            formParams = formParams.append('communicationsTechnology', <any>communicationsTechnology) as any || formParams;
        }
        if (computerTechnology !== undefined) {
            formParams = formParams.append('computerTechnology', <any>computerTechnology) as any || formParams;
        }
        if (computerProgramming !== undefined) {
            formParams = formParams.append('computerProgramming', <any>computerProgramming) as any || formParams;
        }
        if (subroutine !== undefined) {
            formParams = formParams.append('subroutine', <any>subroutine) as any || formParams;
        }
        if (database !== undefined) {
            formParams = formParams.append('database', <any>database) as any || formParams;
        }
        if (energyTechnology !== undefined) {
            formParams = formParams.append('energyTechnology', <any>energyTechnology) as any || formParams;
        }
        if (fictionalTechnology !== undefined) {
            formParams = formParams.append('fictionalTechnology', <any>fictionalTechnology) as any || formParams;
        }
        if (holographicTechnology !== undefined) {
            formParams = formParams.append('holographicTechnology', <any>holographicTechnology) as any || formParams;
        }
        if (identificationTechnology !== undefined) {
            formParams = formParams.append('identificationTechnology', <any>identificationTechnology) as any || formParams;
        }
        if (lifeSupportTechnology !== undefined) {
            formParams = formParams.append('lifeSupportTechnology', <any>lifeSupportTechnology) as any || formParams;
        }
        if (sensorTechnology !== undefined) {
            formParams = formParams.append('sensorTechnology', <any>sensorTechnology) as any || formParams;
        }
        if (shieldTechnology !== undefined) {
            formParams = formParams.append('shieldTechnology', <any>shieldTechnology) as any || formParams;
        }
        if (securityTechnology !== undefined) {
            formParams = formParams.append('securityTechnology', <any>securityTechnology) as any || formParams;
        }
        if (propulsionTechnology !== undefined) {
            formParams = formParams.append('propulsionTechnology', <any>propulsionTechnology) as any || formParams;
        }
        if (spacecraftComponent !== undefined) {
            formParams = formParams.append('spacecraftComponent', <any>spacecraftComponent) as any || formParams;
        }
        if (warpTechnology !== undefined) {
            formParams = formParams.append('warpTechnology', <any>warpTechnology) as any || formParams;
        }
        if (transwarpTechnology !== undefined) {
            formParams = formParams.append('transwarpTechnology', <any>transwarpTechnology) as any || formParams;
        }
        if (timeTravelTechnology !== undefined) {
            formParams = formParams.append('timeTravelTechnology', <any>timeTravelTechnology) as any || formParams;
        }
        if (militaryTechnology !== undefined) {
            formParams = formParams.append('militaryTechnology', <any>militaryTechnology) as any || formParams;
        }
        if (victualTechnology !== undefined) {
            formParams = formParams.append('victualTechnology', <any>victualTechnology) as any || formParams;
        }
        if (tool !== undefined) {
            formParams = formParams.append('tool', <any>tool) as any || formParams;
        }
        if (culinaryTool !== undefined) {
            formParams = formParams.append('culinaryTool', <any>culinaryTool) as any || formParams;
        }
        if (engineeringTool !== undefined) {
            formParams = formParams.append('engineeringTool', <any>engineeringTool) as any || formParams;
        }
        if (householdTool !== undefined) {
            formParams = formParams.append('householdTool', <any>householdTool) as any || formParams;
        }
        if (medicalEquipment !== undefined) {
            formParams = formParams.append('medicalEquipment', <any>medicalEquipment) as any || formParams;
        }
        if (transporterTechnology !== undefined) {
            formParams = formParams.append('transporterTechnology', <any>transporterTechnology) as any || formParams;
        }
        if (transportationTechnology !== undefined) {
            formParams = formParams.append('transportationTechnology', <any>transportationTechnology) as any || formParams;
        }
        if (weaponComponent !== undefined) {
            formParams = formParams.append('weaponComponent', <any>weaponComponent) as any || formParams;
        }
        if (artificialLifeformComponent !== undefined) {
            formParams = formParams.append('artificialLifeformComponent', <any>artificialLifeformComponent) as any || formParams;
        }

        return this.httpClient.request<TechnologyV2BaseResponse>('post',`${this.basePath}/v2/rest/technology/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
