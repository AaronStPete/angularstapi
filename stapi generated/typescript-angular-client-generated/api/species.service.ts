/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SpeciesBaseResponse } from '../model/speciesBaseResponse';
import { SpeciesFullResponse } from '../model/speciesFullResponse';
import { SpeciesV2BaseResponse } from '../model/speciesV2BaseResponse';
import { SpeciesV2FullResponse } from '../model/speciesV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SpeciesService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single species
     * @param uid Species unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetSpecies(uid: string, observe?: 'body', reportProgress?: boolean): Observable<SpeciesFullResponse>;
    public v1GetSpecies(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesFullResponse>>;
    public v1GetSpecies(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesFullResponse>>;
    public v1GetSpecies(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetSpecies.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SpeciesFullResponse>('get',`${this.basePath}/v1/rest/species`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over species
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SpeciesBaseResponse>;
    public v1PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesBaseResponse>>;
    public v1PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesBaseResponse>>;
    public v1PageSpecies(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SpeciesBaseResponse>('get',`${this.basePath}/v1/rest/species/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching species
     * @param name 
     * @param extinctSpecies 
     * @param warpCapableSpecies 
     * @param extraGalacticSpecies 
     * @param humanoidSpecies 
     * @param reptilianSpecies 
     * @param nonCorporealSpecies 
     * @param shapeshiftingSpecies 
     * @param spaceborneSpecies 
     * @param telepathicSpecies 
     * @param transDimensionalSpecies 
     * @param unnamedSpecies 
     * @param alternateReality 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<SpeciesBaseResponse>;
    public v1SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesBaseResponse>>;
    public v1SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesBaseResponse>>;
    public v1SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (extinctSpecies !== undefined) {
            formParams = formParams.append('extinctSpecies', <any>extinctSpecies) as any || formParams;
        }
        if (warpCapableSpecies !== undefined) {
            formParams = formParams.append('warpCapableSpecies', <any>warpCapableSpecies) as any || formParams;
        }
        if (extraGalacticSpecies !== undefined) {
            formParams = formParams.append('extraGalacticSpecies', <any>extraGalacticSpecies) as any || formParams;
        }
        if (humanoidSpecies !== undefined) {
            formParams = formParams.append('humanoidSpecies', <any>humanoidSpecies) as any || formParams;
        }
        if (reptilianSpecies !== undefined) {
            formParams = formParams.append('reptilianSpecies', <any>reptilianSpecies) as any || formParams;
        }
        if (nonCorporealSpecies !== undefined) {
            formParams = formParams.append('nonCorporealSpecies', <any>nonCorporealSpecies) as any || formParams;
        }
        if (shapeshiftingSpecies !== undefined) {
            formParams = formParams.append('shapeshiftingSpecies', <any>shapeshiftingSpecies) as any || formParams;
        }
        if (spaceborneSpecies !== undefined) {
            formParams = formParams.append('spaceborneSpecies', <any>spaceborneSpecies) as any || formParams;
        }
        if (telepathicSpecies !== undefined) {
            formParams = formParams.append('telepathicSpecies', <any>telepathicSpecies) as any || formParams;
        }
        if (transDimensionalSpecies !== undefined) {
            formParams = formParams.append('transDimensionalSpecies', <any>transDimensionalSpecies) as any || formParams;
        }
        if (unnamedSpecies !== undefined) {
            formParams = formParams.append('unnamedSpecies', <any>unnamedSpecies) as any || formParams;
        }
        if (alternateReality !== undefined) {
            formParams = formParams.append('alternateReality', <any>alternateReality) as any || formParams;
        }

        return this.httpClient.request<SpeciesBaseResponse>('post',`${this.basePath}/v1/rest/species/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single species (V2)
     * @param uid Species unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetSpecies(uid: string, observe?: 'body', reportProgress?: boolean): Observable<SpeciesV2FullResponse>;
    public v2GetSpecies(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesV2FullResponse>>;
    public v2GetSpecies(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesV2FullResponse>>;
    public v2GetSpecies(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetSpecies.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SpeciesV2FullResponse>('get',`${this.basePath}/v2/rest/species`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over species (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SpeciesV2BaseResponse>;
    public v2PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesV2BaseResponse>>;
    public v2PageSpecies(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesV2BaseResponse>>;
    public v2PageSpecies(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SpeciesV2BaseResponse>('get',`${this.basePath}/v2/rest/species/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching species (V2)
     * @param name 
     * @param extinctSpecies 
     * @param warpCapableSpecies 
     * @param extraGalacticSpecies 
     * @param humanoidSpecies 
     * @param reptilianSpecies 
     * @param avianSpecies 
     * @param nonCorporealSpecies 
     * @param shapeshiftingSpecies 
     * @param spaceborneSpecies 
     * @param telepathicSpecies 
     * @param transDimensionalSpecies 
     * @param unnamedSpecies 
     * @param alternateReality 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, avianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<SpeciesV2BaseResponse>;
    public v2SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, avianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpeciesV2BaseResponse>>;
    public v2SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, avianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpeciesV2BaseResponse>>;
    public v2SearchSpeciesForm(name?: string, extinctSpecies?: boolean, warpCapableSpecies?: boolean, extraGalacticSpecies?: boolean, humanoidSpecies?: boolean, reptilianSpecies?: boolean, avianSpecies?: boolean, nonCorporealSpecies?: boolean, shapeshiftingSpecies?: boolean, spaceborneSpecies?: boolean, telepathicSpecies?: boolean, transDimensionalSpecies?: boolean, unnamedSpecies?: boolean, alternateReality?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (extinctSpecies !== undefined) {
            formParams = formParams.append('extinctSpecies', <any>extinctSpecies) as any || formParams;
        }
        if (warpCapableSpecies !== undefined) {
            formParams = formParams.append('warpCapableSpecies', <any>warpCapableSpecies) as any || formParams;
        }
        if (extraGalacticSpecies !== undefined) {
            formParams = formParams.append('extraGalacticSpecies', <any>extraGalacticSpecies) as any || formParams;
        }
        if (humanoidSpecies !== undefined) {
            formParams = formParams.append('humanoidSpecies', <any>humanoidSpecies) as any || formParams;
        }
        if (reptilianSpecies !== undefined) {
            formParams = formParams.append('reptilianSpecies', <any>reptilianSpecies) as any || formParams;
        }
        if (avianSpecies !== undefined) {
            formParams = formParams.append('avianSpecies', <any>avianSpecies) as any || formParams;
        }
        if (nonCorporealSpecies !== undefined) {
            formParams = formParams.append('nonCorporealSpecies', <any>nonCorporealSpecies) as any || formParams;
        }
        if (shapeshiftingSpecies !== undefined) {
            formParams = formParams.append('shapeshiftingSpecies', <any>shapeshiftingSpecies) as any || formParams;
        }
        if (spaceborneSpecies !== undefined) {
            formParams = formParams.append('spaceborneSpecies', <any>spaceborneSpecies) as any || formParams;
        }
        if (telepathicSpecies !== undefined) {
            formParams = formParams.append('telepathicSpecies', <any>telepathicSpecies) as any || formParams;
        }
        if (transDimensionalSpecies !== undefined) {
            formParams = formParams.append('transDimensionalSpecies', <any>transDimensionalSpecies) as any || formParams;
        }
        if (unnamedSpecies !== undefined) {
            formParams = formParams.append('unnamedSpecies', <any>unnamedSpecies) as any || formParams;
        }
        if (alternateReality !== undefined) {
            formParams = formParams.append('alternateReality', <any>alternateReality) as any || formParams;
        }

        return this.httpClient.request<SpeciesV2BaseResponse>('post',`${this.basePath}/v2/rest/species/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
