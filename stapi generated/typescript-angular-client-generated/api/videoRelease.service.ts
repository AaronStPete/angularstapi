/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { VideoReleaseBaseResponse } from '../model/videoReleaseBaseResponse';
import { VideoReleaseFullResponse } from '../model/videoReleaseFullResponse';
import { VideoReleaseV2BaseResponse } from '../model/videoReleaseV2BaseResponse';
import { VideoReleaseV2FullResponse } from '../model/videoReleaseV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VideoReleaseService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single video release
     * @param uid Video release unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetVideoRelease(uid: string, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseFullResponse>;
    public v1GetVideoRelease(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseFullResponse>>;
    public v1GetVideoRelease(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseFullResponse>>;
    public v1GetVideoRelease(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetVideoRelease.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VideoReleaseFullResponse>('get',`${this.basePath}/v1/rest/videoRelease`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over video releases
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseBaseResponse>;
    public v1PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseBaseResponse>>;
    public v1PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseBaseResponse>>;
    public v1PageVideoReleases(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VideoReleaseBaseResponse>('get',`${this.basePath}/v1/rest/videoRelease/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching video releases
     * @param title 
     * @param yearFrom 
     * @param yearTo 
     * @param runTimeFrom 
     * @param runTimeTo 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseBaseResponse>;
    public v1SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseBaseResponse>>;
    public v1SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseBaseResponse>>;
    public v1SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (title !== undefined) {
            formParams = formParams.append('title', <any>title) as any || formParams;
        }
        if (yearFrom !== undefined) {
            formParams = formParams.append('yearFrom', <any>yearFrom) as any || formParams;
        }
        if (yearTo !== undefined) {
            formParams = formParams.append('yearTo', <any>yearTo) as any || formParams;
        }
        if (runTimeFrom !== undefined) {
            formParams = formParams.append('runTimeFrom', <any>runTimeFrom) as any || formParams;
        }
        if (runTimeTo !== undefined) {
            formParams = formParams.append('runTimeTo', <any>runTimeTo) as any || formParams;
        }

        return this.httpClient.request<VideoReleaseBaseResponse>('post',`${this.basePath}/v1/rest/videoRelease/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single video release (V2)
     * @param uid Video release unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetVideoRelease(uid: string, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseV2FullResponse>;
    public v2GetVideoRelease(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseV2FullResponse>>;
    public v2GetVideoRelease(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseV2FullResponse>>;
    public v2GetVideoRelease(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetVideoRelease.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VideoReleaseV2FullResponse>('get',`${this.basePath}/v2/rest/videoRelease`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over video releases (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseBaseResponse>;
    public v2PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseBaseResponse>>;
    public v2PageVideoReleases(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseBaseResponse>>;
    public v2PageVideoReleases(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VideoReleaseBaseResponse>('get',`${this.basePath}/v2/rest/videoRelease/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching video releases (V2)
     * @param title 
     * @param yearFrom 
     * @param yearTo 
     * @param runTimeFrom 
     * @param runTimeTo 
     * @param documentary 
     * @param specialFeatures 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, documentary?: boolean, specialFeatures?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<VideoReleaseV2BaseResponse>;
    public v2SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, documentary?: boolean, specialFeatures?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VideoReleaseV2BaseResponse>>;
    public v2SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, documentary?: boolean, specialFeatures?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VideoReleaseV2BaseResponse>>;
    public v2SearchVideoReleasesForm(title?: string, yearFrom?: number, yearTo?: number, runTimeFrom?: number, runTimeTo?: number, documentary?: boolean, specialFeatures?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (title !== undefined) {
            formParams = formParams.append('title', <any>title) as any || formParams;
        }
        if (yearFrom !== undefined) {
            formParams = formParams.append('yearFrom', <any>yearFrom) as any || formParams;
        }
        if (yearTo !== undefined) {
            formParams = formParams.append('yearTo', <any>yearTo) as any || formParams;
        }
        if (runTimeFrom !== undefined) {
            formParams = formParams.append('runTimeFrom', <any>runTimeFrom) as any || formParams;
        }
        if (runTimeTo !== undefined) {
            formParams = formParams.append('runTimeTo', <any>runTimeTo) as any || formParams;
        }
        if (documentary !== undefined) {
            formParams = formParams.append('documentary', <any>documentary) as any || formParams;
        }
        if (specialFeatures !== undefined) {
            formParams = formParams.append('specialFeatures', <any>specialFeatures) as any || formParams;
        }

        return this.httpClient.request<VideoReleaseV2BaseResponse>('post',`${this.basePath}/v2/rest/videoRelease/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
