/**
 * STAPI
 * STAPI, a Star Trek API
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CompanyBaseResponse } from '../model/companyBaseResponse';
import { CompanyFullResponse } from '../model/companyFullResponse';
import { CompanyV2BaseResponse } from '../model/companyV2BaseResponse';
import { CompanyV2FullResponse } from '../model/companyV2FullResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CompanyService {

    protected basePath = 'https://stapi.co/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Retrieval of a single company
     * @param uid Company unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1GetCompany(uid: string, observe?: 'body', reportProgress?: boolean): Observable<CompanyFullResponse>;
    public v1GetCompany(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyFullResponse>>;
    public v1GetCompany(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyFullResponse>>;
    public v1GetCompany(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v1GetCompany.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CompanyFullResponse>('get',`${this.basePath}/v1/rest/company`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over companies
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyBaseResponse>;
    public v1PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyBaseResponse>>;
    public v1PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyBaseResponse>>;
    public v1PageCompanies(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CompanyBaseResponse>('get',`${this.basePath}/v1/rest/company/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching companies
     * @param name 
     * @param broadcaster 
     * @param collectibleCompany 
     * @param conglomerate 
     * @param digitalVisualEffectsCompany 
     * @param distributor 
     * @param gameCompany 
     * @param filmEquipmentCompany 
     * @param makeUpEffectsStudio 
     * @param mattePaintingCompany 
     * @param modelAndMiniatureEffectsCompany 
     * @param postProductionCompany 
     * @param productionCompany 
     * @param propCompany 
     * @param recordLabel 
     * @param specialEffectsCompany 
     * @param tvAndFilmProductionCompany 
     * @param videoGameCompany 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1SearchCompaniesForm(name?: string, broadcaster?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<CompanyBaseResponse>;
    public v1SearchCompaniesForm(name?: string, broadcaster?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyBaseResponse>>;
    public v1SearchCompaniesForm(name?: string, broadcaster?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyBaseResponse>>;
    public v1SearchCompaniesForm(name?: string, broadcaster?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (broadcaster !== undefined) {
            formParams = formParams.append('broadcaster', <any>broadcaster) as any || formParams;
        }
        if (collectibleCompany !== undefined) {
            formParams = formParams.append('collectibleCompany', <any>collectibleCompany) as any || formParams;
        }
        if (conglomerate !== undefined) {
            formParams = formParams.append('conglomerate', <any>conglomerate) as any || formParams;
        }
        if (digitalVisualEffectsCompany !== undefined) {
            formParams = formParams.append('digitalVisualEffectsCompany', <any>digitalVisualEffectsCompany) as any || formParams;
        }
        if (distributor !== undefined) {
            formParams = formParams.append('distributor', <any>distributor) as any || formParams;
        }
        if (gameCompany !== undefined) {
            formParams = formParams.append('gameCompany', <any>gameCompany) as any || formParams;
        }
        if (filmEquipmentCompany !== undefined) {
            formParams = formParams.append('filmEquipmentCompany', <any>filmEquipmentCompany) as any || formParams;
        }
        if (makeUpEffectsStudio !== undefined) {
            formParams = formParams.append('makeUpEffectsStudio', <any>makeUpEffectsStudio) as any || formParams;
        }
        if (mattePaintingCompany !== undefined) {
            formParams = formParams.append('mattePaintingCompany', <any>mattePaintingCompany) as any || formParams;
        }
        if (modelAndMiniatureEffectsCompany !== undefined) {
            formParams = formParams.append('modelAndMiniatureEffectsCompany', <any>modelAndMiniatureEffectsCompany) as any || formParams;
        }
        if (postProductionCompany !== undefined) {
            formParams = formParams.append('postProductionCompany', <any>postProductionCompany) as any || formParams;
        }
        if (productionCompany !== undefined) {
            formParams = formParams.append('productionCompany', <any>productionCompany) as any || formParams;
        }
        if (propCompany !== undefined) {
            formParams = formParams.append('propCompany', <any>propCompany) as any || formParams;
        }
        if (recordLabel !== undefined) {
            formParams = formParams.append('recordLabel', <any>recordLabel) as any || formParams;
        }
        if (specialEffectsCompany !== undefined) {
            formParams = formParams.append('specialEffectsCompany', <any>specialEffectsCompany) as any || formParams;
        }
        if (tvAndFilmProductionCompany !== undefined) {
            formParams = formParams.append('tvAndFilmProductionCompany', <any>tvAndFilmProductionCompany) as any || formParams;
        }
        if (videoGameCompany !== undefined) {
            formParams = formParams.append('videoGameCompany', <any>videoGameCompany) as any || formParams;
        }

        return this.httpClient.request<CompanyBaseResponse>('post',`${this.basePath}/v1/rest/company/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieval of a single company (V2)
     * @param uid Company unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2GetCompany(uid: string, observe?: 'body', reportProgress?: boolean): Observable<CompanyV2FullResponse>;
    public v2GetCompany(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyV2FullResponse>>;
    public v2GetCompany(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyV2FullResponse>>;
    public v2GetCompany(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling v2GetCompany.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CompanyV2FullResponse>('get',`${this.basePath}/v2/rest/company`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Pagination over companies (V2)
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyV2BaseResponse>;
    public v2PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyV2BaseResponse>>;
    public v2PageCompanies(pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyV2BaseResponse>>;
    public v2PageCompanies(pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CompanyV2BaseResponse>('get',`${this.basePath}/v2/rest/company/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Searching companies (V2)
     * @param name 
     * @param broadcaster 
     * @param streamingService 
     * @param collectibleCompany 
     * @param conglomerate 
     * @param visualEffectsCompany 
     * @param digitalVisualEffectsCompany 
     * @param distributor 
     * @param gameCompany 
     * @param filmEquipmentCompany 
     * @param makeUpEffectsStudio 
     * @param mattePaintingCompany 
     * @param modelAndMiniatureEffectsCompany 
     * @param postProductionCompany 
     * @param productionCompany 
     * @param propCompany 
     * @param recordLabel 
     * @param specialEffectsCompany 
     * @param tvAndFilmProductionCompany 
     * @param videoGameCompany 
     * @param publisher 
     * @param publicationArtStudio 
     * @param pageNumber Zero-based page number
     * @param pageSize Page size
     * @param sort Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2SearchCompaniesForm(name?: string, broadcaster?: boolean, streamingService?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, visualEffectsCompany?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, publisher?: boolean, publicationArtStudio?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<CompanyV2BaseResponse>;
    public v2SearchCompaniesForm(name?: string, broadcaster?: boolean, streamingService?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, visualEffectsCompany?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, publisher?: boolean, publicationArtStudio?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyV2BaseResponse>>;
    public v2SearchCompaniesForm(name?: string, broadcaster?: boolean, streamingService?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, visualEffectsCompany?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, publisher?: boolean, publicationArtStudio?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyV2BaseResponse>>;
    public v2SearchCompaniesForm(name?: string, broadcaster?: boolean, streamingService?: boolean, collectibleCompany?: boolean, conglomerate?: boolean, visualEffectsCompany?: boolean, digitalVisualEffectsCompany?: boolean, distributor?: boolean, gameCompany?: boolean, filmEquipmentCompany?: boolean, makeUpEffectsStudio?: boolean, mattePaintingCompany?: boolean, modelAndMiniatureEffectsCompany?: boolean, postProductionCompany?: boolean, productionCompany?: boolean, propCompany?: boolean, recordLabel?: boolean, specialEffectsCompany?: boolean, tvAndFilmProductionCompany?: boolean, videoGameCompany?: boolean, publisher?: boolean, publicationArtStudio?: boolean, pageNumber?: number, pageSize?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (broadcaster !== undefined) {
            formParams = formParams.append('broadcaster', <any>broadcaster) as any || formParams;
        }
        if (streamingService !== undefined) {
            formParams = formParams.append('streamingService', <any>streamingService) as any || formParams;
        }
        if (collectibleCompany !== undefined) {
            formParams = formParams.append('collectibleCompany', <any>collectibleCompany) as any || formParams;
        }
        if (conglomerate !== undefined) {
            formParams = formParams.append('conglomerate', <any>conglomerate) as any || formParams;
        }
        if (visualEffectsCompany !== undefined) {
            formParams = formParams.append('visualEffectsCompany', <any>visualEffectsCompany) as any || formParams;
        }
        if (digitalVisualEffectsCompany !== undefined) {
            formParams = formParams.append('digitalVisualEffectsCompany', <any>digitalVisualEffectsCompany) as any || formParams;
        }
        if (distributor !== undefined) {
            formParams = formParams.append('distributor', <any>distributor) as any || formParams;
        }
        if (gameCompany !== undefined) {
            formParams = formParams.append('gameCompany', <any>gameCompany) as any || formParams;
        }
        if (filmEquipmentCompany !== undefined) {
            formParams = formParams.append('filmEquipmentCompany', <any>filmEquipmentCompany) as any || formParams;
        }
        if (makeUpEffectsStudio !== undefined) {
            formParams = formParams.append('makeUpEffectsStudio', <any>makeUpEffectsStudio) as any || formParams;
        }
        if (mattePaintingCompany !== undefined) {
            formParams = formParams.append('mattePaintingCompany', <any>mattePaintingCompany) as any || formParams;
        }
        if (modelAndMiniatureEffectsCompany !== undefined) {
            formParams = formParams.append('modelAndMiniatureEffectsCompany', <any>modelAndMiniatureEffectsCompany) as any || formParams;
        }
        if (postProductionCompany !== undefined) {
            formParams = formParams.append('postProductionCompany', <any>postProductionCompany) as any || formParams;
        }
        if (productionCompany !== undefined) {
            formParams = formParams.append('productionCompany', <any>productionCompany) as any || formParams;
        }
        if (propCompany !== undefined) {
            formParams = formParams.append('propCompany', <any>propCompany) as any || formParams;
        }
        if (recordLabel !== undefined) {
            formParams = formParams.append('recordLabel', <any>recordLabel) as any || formParams;
        }
        if (specialEffectsCompany !== undefined) {
            formParams = formParams.append('specialEffectsCompany', <any>specialEffectsCompany) as any || formParams;
        }
        if (tvAndFilmProductionCompany !== undefined) {
            formParams = formParams.append('tvAndFilmProductionCompany', <any>tvAndFilmProductionCompany) as any || formParams;
        }
        if (videoGameCompany !== undefined) {
            formParams = formParams.append('videoGameCompany', <any>videoGameCompany) as any || formParams;
        }
        if (publisher !== undefined) {
            formParams = formParams.append('publisher', <any>publisher) as any || formParams;
        }
        if (publicationArtStudio !== undefined) {
            formParams = formParams.append('publicationArtStudio', <any>publicationArtStudio) as any || formParams;
        }

        return this.httpClient.request<CompanyV2BaseResponse>('post',`${this.basePath}/v2/rest/company/search`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
